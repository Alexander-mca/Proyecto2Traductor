/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,15],$V2=[1,16],$V3=[1,17],$V4=[1,21],$V5=[1,28],$V6=[1,25],$V7=[1,27],$V8=[1,26],$V9=[1,24],$Va=[1,30],$Vb=[1,31],$Vc=[1,32],$Vd=[1,33],$Ve=[1,34],$Vf=[1,23],$Vg=[1,22],$Vh=[1,29],$Vi=[2,5,19,20,21,24,29,31,36,43,46,48,51,60,72,73,74,75,76,77,78,79],$Vj=[1,47],$Vk=[1,45],$Vl=[1,53],$Vm=[1,54],$Vn=[1,55],$Vo=[1,56],$Vp=[1,57],$Vq=[1,58],$Vr=[1,51],$Vs=[1,52],$Vt=[1,62],$Vu=[1,61],$Vv=[1,70],$Vw=[1,73],$Vx=[1,74],$Vy=[1,78],$Vz=[1,79],$VA=[1,80],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,75],$VF=[1,76],$VG=[8,27,28,41,42,62,63,65,66,67,68,69,70,80,81,84],$VH=[1,85],$VI=[1,86],$VJ=[2,85],$VK=[8,27,28,41,42,50,62,63,65,66,67,68,69,70,80,81,84],$VL=[1,91],$VM=[24,42,52,53,54,55,56,57,82,83],$VN=[8,27,28,41,42,62,63,80,81,84],$VO=[8,27,28,62,63,84],$VP=[1,123],$VQ=[27,28],$VR=[1,132],$VS=[1,133],$VT=[8,27,28,41,42,62,63,84],$VU=[8,27,28,40,41,42,62,63,65,66,67,68,69,70,80,81,84],$VV=[1,144],$VW=[8,28,35],$VX=[41,42,65,66,67,68,69,70,80,81],$VY=[2,49],$VZ=[1,161],$V_=[1,162],$V$=[46,48,51];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"ini":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"PUNTOYCOMA":8,"asignacion":9,"metodo":10,"funcion":11,"main":12,"sent_if":13,"sent_while":14,"sent_switch":15,"sent_for":16,"sent_dowhile":17,"imprimir":18,"CONTINUE":19,"BREAK":20,"RETURN":21,"expresion":22,"llamada":23,"ID":24,"PARABRE":25,"valores":26,"PARCIERRA":27,"COMA":28,"DO":29,"bloque":30,"WHILE":31,"condiciones":32,"tipo":33,"parametros":34,"IGUAL":35,"FOR":36,"ford":37,"condicion":38,"aumf":39,"PARCIERRE":40,"MAS":41,"MENOS":42,"SWITCH":43,"LLAVEIZQ":44,"casos":45,"LLAVEDER":46,"caso":47,"CASE":48,"valor":49,"DOSPUNTOS":50,"DEFAULT":51,"CADENA":52,"CHAR":53,"INT":54,"DOUBLE":55,"BOOL":56,"CADENAHTML":57,"sents_ifs":58,"ELSE":59,"IF":60,"oplogico":61,"AND":62,"OR":63,"scomp":64,"MAYOR":65,"MENOR":66,"MAYORIGUAL":67,"MENORIGUAL":68,"IGUALIGUAL":69,"DIFERENTE":70,"declvarias":71,"RCHAR":72,"RSTRING":73,"RDOUBLE":74,"RINT":75,"RBOOL":76,"RMAIN":77,"RVOID":78,"PRINT":79,"POR":80,"DIVIDIDO":81,"NOT":82,"PARIZQ":83,"PARDER":84,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",8:"PUNTOYCOMA",19:"CONTINUE",20:"BREAK",21:"RETURN",24:"ID",25:"PARABRE",27:"PARCIERRA",28:"COMA",29:"DO",31:"WHILE",35:"IGUAL",36:"FOR",40:"PARCIERRE",41:"MAS",42:"MENOS",43:"SWITCH",44:"LLAVEIZQ",46:"LLAVEDER",48:"CASE",50:"DOSPUNTOS",51:"DEFAULT",52:"CADENA",53:"CHAR",54:"INT",55:"DOUBLE",56:"BOOL",57:"CADENAHTML",59:"ELSE",60:"IF",62:"AND",63:"OR",65:"MAYOR",66:"MENOR",67:"MAYORIGUAL",68:"MENORIGUAL",69:"IGUALIGUAL",70:"DIFERENTE",72:"RCHAR",73:"RSTRING",74:"RDOUBLE",75:"RINT",76:"RBOOL",77:"RMAIN",78:"RVOID",79:"PRINT",80:"POR",81:"DIVIDIDO",82:"NOT",83:"PARIZQ",84:"PARDER"},
productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[6,2],[6,3],[6,2],[6,2],[6,1],[23,4],[23,3],[26,3],[26,1],[17,6],[11,6],[9,3],[16,9],[39,3],[39,3],[37,1],[37,1],[14,5],[15,7],[45,2],[45,1],[47,4],[47,3],[49,1],[49,1],[49,1],[49,1],[49,1],[49,1],[58,3],[58,3],[58,1],[13,5],[32,3],[32,1],[61,1],[61,1],[38,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[7,5],[7,3],[71,3],[71,2],[33,1],[33,1],[33,1],[33,1],[33,1],[12,4],[10,6],[10,5],[34,4],[34,3],[30,3],[30,2],[18,4],[22,2],[22,3],[22,3],[22,3],[22,3],[22,1],[22,1],[22,1],[22,1],[22,1],[22,2],[22,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return $$[$0-1];
break;
case 2:
 $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 13: case 14: case 19: case 74:
this.$=$$[$0-1];
break;
case 6: case 7: case 8: case 9: case 10: case 11: case 12: case 31: case 32:
this.$=$$[$0];
break;
case 15:
this.$=instruccionesAPI.nuevoContinue();
break;
case 16:
this.$=instruccionesAPI.nuevoBreak();
break;
case 17:
this.$=instruccionesAPI.nuevoReturn($$[$0-2]);
break;
case 18:
this.$=instruccionesAPI.nuevoReturn(undefined);
break;
case 20:
 const error=instruccionesAPI.Error('sintactico',this._$.first_line,this._$.first_column,yytext);this.listaErrores.push(error);
	        console.error('Este es un error sint√°ctico: ' + yytext + ', en la linea: ' + this._$.first_line + ', en la columna: ' + this._$.first_column); 
break;
case 21:
this.$=instruccionesAPI.nuevaLlamada($$[$0-3],$$[$0-1]);
break;
case 22:
this.$=instruccionesAPI.nuevaLLamada($$[$0-2],undefined);
break;
case 23: case 45:
$$[$0-2].push($$[$0]); this.$=$$[$0-2];
break;
case 24:
this.$=instruccionesAPI.nuevaListaValores($$[$0]);
break;
case 25:
this.$=instruccionesAPI.nuevoDoWhile($$[$0-1],$$[$0-4]);
break;
case 26:
this.$=instruccionesAPI.nuevaFuncion($$[$0-5],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 27:
this.$=instruccionesAPI.nuevaAsignacion($$[$0-2],$$[$0]);
break;
case 28:
this.$=instruccionesAPI.nuevoFor($$[$0-6],$$[$0-4],$$[$0-2],$$[$0]);
break;
case 29:
this.$=instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-2],TIPO_VALOR.Identificador),TIPO_OPERACION.AUMENTO);
break;
case 30:
this.$=instruccionesAPI.nuevaOperacionUnaria(instruccionesAPI.nuevoValor($$[$0-2],TIPO_VALOR.Identificador),TIPO_OPERACION.DECREMENTO);
break;
case 33:
this.$=instruccionesAPI.nuevoMientras($$[$0-2],$$[$0]);
break;
case 34:
this.$=instrucccionesAPI.nuevoSwitch($$[$0-4],$$[$0-1]);
break;
case 35:
$$[$0-1].push($$[$0]);
break;
case 36:
this.$=instruccionesAPI.nuevaListaCasos($$[$0]);
break;
case 37:
this.$=instruccionesAPI.nuevoCaso($$[$0-2],$$[$0]);
break;
case 38:
this.$=instruccionesAPI.nuevoCasoDef($$[$0]);
break;
case 39:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.Cadena);
break;
case 40:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.Caracter);
break;
case 41:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.Entero);
break;
case 42:
this.$=instruccionesAPI.nuevoValor(Number($$[$0]),TIPO_VALOR.Double);
break;
case 43:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.Booleano);
break;
case 44:
 codigohtml+=$$[$0]; this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.CADENAHTML);
break;
case 46:
$$[$0-2].push(instruccionesAPI.nuevoElse($$[$0])); this.$=$$[$0-2];
break;
case 47:
this.$=instruccionesAPI.nuevoListaIfs($$[$0]);
break;
case 48:
this.$=instruccionesAPI.nuevoIf($$[$0-2],$$[$0]);
break;
case 49:
$$[$0-2].push($$[$0-1]);$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 50:
this.$=instruccionesAPI.nuevaListaCondiciones($$[$0]);
break;
case 51:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.AND);
break;
case 52:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.OR);
break;
case 53:
this.$=instruccionesAPI.nuevaOperacionBinaria($$[$0-2],$$[$0-1],$$[$0]);
break;
case 54:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MAYOR_QUE);
break;
case 55:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MENOR_QUE);
break;
case 56:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MAYOR_IGUAL);
break;
case 57:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.MENOR_IGUAL);
break;
case 58:
this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.DOBLE_IGUAL);
break;
case 59:
this.$=this.$=instruccionesAPI.nuevoOperador(TIPO_OPERACION.DIFERENTE);
break;
case 60:
this.$=instruccionesAPI.nuevaDeclaracion($$[$0-3],$$[$0-4],$$[$0]);
break;
case 61:
this.$=instruccionesAPI.nuevaDeclaracion($$[$0-1],$$[$0-2],undefined);
break;
case 62:
$$[$0-2].push($$[$0]);this.$=$$[$0-2];
break;
case 63:
this.$=instruccionesAPI.nuevaListaIds($$[$0]);
break;
case 64:
this.$=TIPO_DATO.CHAR;
break;
case 65:
this.$=TIPO_DATO.STRING;
break;
case 66:
this.$=TIPO_DATO.DOUBLE;
break;
case 67:
this.$=TIPO_DATO.INT;
break;
case 68:
this.$=TIPO_DATO.BOOLEAN;
break;
case 69:
this.$=instruccionesAPI.main($$[$0]);
break;
case 70:
this.$=instruccionesAPI.nuevoMetodo($$[$0-4],$$[$0-2],$$[$0]);
break;
case 71:
this.$=instruccionesAPI.nuevoMetodo($$[$0-3],undefined,$$[$0]);
break;
case 72:
$$[$0-3].push(instruccionAPI.nuevaDeclaracion($$[$0-1],$$[$0-2],undefined));this.$=$$[$0-3];
break;
case 73:
this.$=[instruccionAPI.nuevaDeclaracion($$[$0],$$[$0-1],undefined)];
break;
case 75:
this.$=undefined;
break;
case 76:
this.$=instruccionesAPI.nuevoImprimir($$[$0-1]);
break;
case 77:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NEGATIVO);
break;
case 78:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.SUMA);
break;
case 79:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.RESTA);
break;
case 80:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.MULTIPLICACION);
break;
case 81:
this.$=instruccionesAPI.nuevoOperacionBinaria($$[$0-2],$$[$0],TIPO_OPERACION.DIVISION);
break;
case 82: case 84: case 85:
this.$=$$[$0]; 
break;
case 83:
this.$=instruccionesAPI.nuevoValor($$[$0],TIPO_VALOR.Identificador); 
break;
case 86:
this.$=$$[$0]
break;
case 87:
this.$=instruccionesAPI.nuevoOperacionUnaria($$[$0],TIPO_OPERACION.NOT); 
break;
case 88:
this.$=$$[$0-1]; 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},{1:[3]},{2:$V0,5:[1,35],6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},o($Vi,[2,3]),{8:[1,37]},{8:[1,38]},o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),o($Vi,[2,11]),o($Vi,[2,12]),{8:[1,39]},{8:[1,40]},{8:[1,41]},{8:[1,42]},{8:[1,44],22:43,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{8:[1,59]},o($Vi,[2,20]),{24:[1,60]},{25:$Vt,35:$Vu},{24:[1,63]},{25:[1,64]},{25:[1,65]},{25:[1,66]},{25:[1,67]},{25:[1,68]},{30:69,44:$Vv},{25:[1,71]},{24:[2,64]},{24:[2,65]},{24:[2,66]},{24:[2,67]},{24:[2,68]},{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,13]),o($Vi,[2,14]),o($Vi,[2,15]),o($Vi,[2,16]),{8:[1,72],41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF},o($Vi,[2,18]),{22:84,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($VG,[2,82]),o([8,27,28,62,63,65,66,67,68,69,70,80,81,84],[2,83],{25:$Vt,41:$VH,42:$VI}),o($VG,[2,84]),o($VG,$VJ),o($VG,[2,86]),{22:87,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:88,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($VK,[2,39]),o($VK,[2,40]),o($VK,[2,41]),o($VK,[2,42]),o($VK,[2,43]),o($VK,[2,44]),o($Vi,[2,19]),{25:[1,90],28:$VL,71:89},{22:92,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:95,23:50,24:$Vj,26:93,27:[1,94],38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{25:[1,96]},{27:[1,97]},{22:100,23:50,24:$Vj,32:98,38:99,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:100,23:50,24:$Vj,32:101,38:99,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{24:[1,102]},{7:104,9:105,24:[1,107],33:106,37:103,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve},{31:[1,108]},{2:$V0,4:109,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,46:[1,110],60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},{22:111,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($Vi,[2,17]),{22:112,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:113,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:114,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:115,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{22:116,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($VM,[2,54]),o($VM,[2,55]),o($VM,[2,56]),o($VM,[2,57]),o($VM,[2,58]),o($VM,[2,59]),o($VN,[2,77],{64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),{41:[1,117]},{42:[1,118]},o($VO,[2,87],{64:77,41:$Vw,42:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),{41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF,84:[1,119]},{8:[2,61],28:[1,121],35:[1,120]},{28:$VP,34:122},{24:[1,124]},{8:[2,27],41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF},{27:[1,125],28:[1,126]},o($VG,[2,22]),o($VQ,[2,24],{64:77,41:$Vw,42:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),{27:[1,128],28:$VP,34:127},{30:129,44:$Vv},{27:[1,130],61:131,62:$VR,63:$VS},o([27,41,42,62,63,65,66,67,68,69,70,80,81],[2,50]),{41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF},{27:[1,134],61:131,62:$VR,63:$VS},{27:[1,135]},{8:[1,136]},{8:[2,31]},{8:[2,32]},{24:[1,137]},{35:$Vu},{25:[1,138]},{2:$V0,6:36,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,46:[1,139],60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},o($Vi,[2,75]),{27:[1,140],41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF},o($VT,[2,78],{64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),o($VT,[2,79],{64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),o($VN,[2,80],{64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($VN,[2,81],{64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD}),o($VO,[2,53],{64:77,41:$Vw,42:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),o($VU,[2,29]),o($VU,[2,30]),o($VG,[2,88]),{22:141,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{24:[1,142]},{27:[1,143],28:$VV},{33:145,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve},o($VW,[2,63]),o($VG,[2,21]),{22:146,23:50,24:$Vj,38:49,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{27:[1,147],28:$VV},{30:148,44:$Vv},o($Vi,[2,69]),{30:149,44:$Vv},{22:100,23:50,24:$Vj,38:150,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($VM,[2,51]),o($VM,[2,52]),{30:151,44:$Vv},{44:[1,152]},{22:100,23:50,24:$Vj,38:153,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},{28:$VL,71:89},{22:100,23:50,24:$Vj,32:154,38:99,39:48,42:$Vk,49:46,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq,82:$Vr,83:$Vs},o($Vi,[2,74]),{8:[2,76]},{8:[2,60],41:$Vw,42:$Vx,64:77,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF},o($VW,[2,62]),{30:155,44:$Vv},{33:156,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve},{24:[1,157]},o($VQ,[2,23],{64:77,41:$Vw,42:$Vx,65:$Vy,66:$Vz,67:$VA,68:$VB,69:$VC,70:$VD,80:$VE,81:$VF}),{30:158,44:$Vv},o($Vi,[2,71]),o($Vi,[2,48]),o($VX,$VJ,{27:$VY,62:$VY,63:$VY}),o($Vi,[2,33]),{45:159,47:160,48:$VZ,51:$V_},o($VX,$VJ,{8:[1,163]}),{27:[1,164],61:131,62:$VR,63:$VS},o($Vi,[2,26]),{24:[1,165]},o($VQ,[2,73]),o($Vi,[2,70]),{46:[1,166],47:167,48:$VZ,51:$V_},o($V$,[2,36]),{49:168,52:$Vl,53:$Vm,54:$Vn,55:$Vo,56:$Vp,57:$Vq},{50:[1,169]},{24:[1,171],39:170},{8:[2,25]},o($VQ,[2,72]),o($Vi,[2,34]),o($V$,[2,35]),{50:[1,172]},{2:$V0,4:173,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},{40:[1,174]},{41:$VH,42:$VI},{2:$V0,4:175,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:$V1,20:$V2,21:$V3,23:18,24:$V4,29:$V5,31:$V6,33:20,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh},o($V$,[2,38],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,23:18,33:20,6:36,2:$V0,19:$V1,20:$V2,21:$V3,24:$V4,29:$V5,31:$V6,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh}),{30:176,44:$Vv},o($V$,[2,37],{7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,23:18,33:20,6:36,2:$V0,19:$V1,20:$V2,21:$V3,24:$V4,29:$V5,31:$V6,36:$V7,43:$V8,60:$V9,72:$Va,73:$Vb,74:$Vc,75:$Vd,76:$Ve,77:$Vf,78:$Vg,79:$Vh}),o($Vi,[2,28])],
defaultActions: {30:[2,64],31:[2,65],32:[2,66],33:[2,67],34:[2,68],35:[2,1],104:[2,31],105:[2,32],140:[2,76],164:[2,25]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};


  	const TIPO_OPERACION	= require('./instruccion').TIPO_OPERACION;
  	const TIPO_VALOR 		= require('./instruccion').TIPO_VALOR;
  	const TIPO_DATO			= require('./tabla_simbolos').TIPO_DATO; //para jalar el tipo de dato
  	const instruccionesAPI	= require('./instruccion').instruccionesAPI;
    var listaErrores=[];
    var codigohtml=undefined;
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 8;
break;
case 1:return 28;
break;
case 2:return 50;
break;
case 3:return 25;
break;
case 4:return 27;
break;
case 5:return 'CORIZQ';
break;
case 6:return 'CORDER';
break;
case 7:return 46;
break;
case 8:return 44;
break;
case 9:return 41;
break;
case 10:return 42;
break;
case 11:return 80;
break;
case 12:return 81;
break;
case 13:return 35;
break;
case 14:return 66;
break;
case 15:return 65;
break;
case 16:return 82;
break;
case 17:return 67;
break;
case 18:return 68;
break;
case 19:return 70;
break;
case 20:return 69;
break;
case 21:return 62;
break;
case 22:return 63;
break;
case 23:return 75;
break;
case 24:return 74;
break;
case 25:return 72;
break;
case 26:return 76;
break;
case 27:return 73;
break;
case 28:return 'VOID';
break;
case 29:return 'MAIN';
break;
case 30:return 60;
break;
case 31:return 59;
break;
case 32:return 31;
break;
case 33:return 29;
break;
case 34:return 43;
break;
case 35:return 48;
break;
case 36:return 51;
break;
case 37:return 79;
break;
case 38:return 20;
break;
case 39:return 'TRUE';
break;
case 40:return 'FALSE';
break;
case 41:return 21;
break;
case 42:return 19;
break;
case 43:return 52;
break;
case 44:return 24;
break;
case 45:
break;
case 46:
break;
case 47:return 53;
break;
case 48:return  'CADENAHTML';
break;
case 49:return 55;
break;
case 50:return 54;
break;
case 51:return 5;
break;
case 52:    const error=instruccionesAPI.Error('L√©xico',this._$.first_line,this._$.first_column,yy_.yytext);listaErrores.push(error);
                            console.error('Este es un error l√©xico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+;)/i,/^(?:,)/i,/^(?::)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:!)/i,/^(?:>=)/i,/^(?:<=)/i,/^(?:!=)/i,/^(?:==)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:char\b)/i,/^(?:bool\b)/i,/^(?:string\b)/i,/^(?:void\b)/i,/^(?:main\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:default\b)/i,/^(?:console\\\.write\b)/i,/^(?:break\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:return\b)/i,/^(?:continue\b)/i,/^(?:\/\/.*\n\/\*.*\*\/".*")/i,/^(?:([A-Za-z])[A-Za-z0-9_]*)/i,/^(?:[ \r\t]+)/i,/^(?:\n)/i,/^(?:'.')/i,/^(?:'..+')/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.codigoHtml=gramatica.codigoHtml;
exports.listaErrores=gramatica.listaErrores;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
